 JENKINS

Launch instance

Name: JENKINS
os : amazon linux
ami : n-1 version
instance type : t3.medium
keypair : jenkins123
security group : Alltcp
configuration storage : 30GB
click :Launch instance

putty configuration :
ec2-user
sudo yum update
sudo -i
```````````````````````````````
vi jenkins.sh

insert i: 
```````
(jenkins works in java)

#java installation:
yum install java -y

#Jenkins installation :
sudo wget -O /etc/yum.repos.d/jenkins.repo     https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
yum upgrade -y
yum update -y
yum install jenkins  -y
systemctl daemon-reload
systemctl enable jenkins
systemctl start jenkins
systemctl status jenkins

save the file :wq!
------------------


chmod +x jenkins.sh
./jenkins.sh start

``````````````````````````````
vi packages.sh

insert i:

# DOCKER INSTALLATION
yum upgrade -y
yum update -y
yum install docker -y
systemctl enable docker
systemctl start docker
systemctl status docker
docker --version

#GIT INSTALLATION
yum upgrade -y
yum update -y
yum install git -y
git --version

#MAVEN INSTALLATION
yum upgrade -y
yum update -y
yum install maven -y
mvn -v

save the file :wq!
--------------------
chmod +x packages.sh
./packages.sh start


mvn -v
docker --version
git --version 

systemctl status docker


hit the public ip address : http://13.53.216.31:8010/

Jenkins dashboard : unlock jenkins 
-----------------------------------

copy the key  : /var/lib/jenkins/secrets/initialAdminPassword

paste the terminal : cat /var/lib/jenkins/secrets/initialAdminPassword
61ca5170965745d68c5ca4e9a4f2d1a8

jenkins dashboard : paste the key : 61ca5170965745d68c5ca4e9a4f2d1a8

customised jenkins : install suggested plugins 


create first admin user:
```````````````````
username: admin
password: admin
confirm password: admin
name : RAVI KUMAR B
Email : ravimca2012@gmail.com

save and finish -start jenkins dashboard page

jenkins ready ! : Start using jenkins



----------------------------------


create a job -- create job 
Enter the name : project
Select : pipeline 
click : ok


Jenkins Dashboard --manage jenkins -- tools -- maven installation -- add maven

name :maven2024
install from apache : version 3.6.0
click apply - save


stage 1 :
````````

pipeline{
    agent any
    tools {
        maven 'maven2024'
    }
    stages{
        stage ('clean Workspace'){
            steps{
                cleanWs()
            }
        }
        stage ('checkout scm') {
            steps {
                git 'https://github.com/ravib007/jpetstore-6.git'
            }
        }
        stage ('maven compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage ('maven Test') {
            steps {
                sh 'mvn test'
            }
        }
   }
}




Jenkins Dashboard --manage jenkins --plugins -- available plugins -- pipeline : stage view -- install
``````````


goto sonarqube login page : profile select admininstrator -- security --tokens

Generate token:
Name : pooventhan
type : user token
expires in : no expiration
click : generate 

copy the token : squ_0a5888c759d263459cfc469a3fd8a0b90531e9e9


jenkins dashboard -- manage jenkins -- credentials --  

store : admin
domain : global ( click arrow) -- add credentials

new credentials :
kind : (select) secret text
scope : global (jenkins etc)
secret : squ_0a5888c759d263459cfc469a3fd8a0b90531e9e9 ( sonar generate token paste it)
id : sonar-token
description : sonar-token
click -- create 

jenkins dashboard -- manage jenkins --plugins  --available plugins -- sonarqube scanner -- install
   

jenkins dashboard -- manage jenkins -- system -- sonarqube servers 

select (tick ) Environment variables

sonarqube installation :
Name : sonar-server
server url : http://13.49.18.23:9000/
server authentication : sonar-token (select)
click -- apply -- save

sonarqube scanner installation : add sonarqube scanner
Name : sonarqube
install automatically : version sonarqube scanner 5.0.1.3006
click -- apply-- save


goto sonarqube dashboard page :

select administrator -- configuration -- webhooks  -- create

create webhook :
Name :Jenkins
url : http://13.53.216.31:8010/sonarqube-webhook/
secret : default (empty)
click -- create 


jenkins dashboard -- manage jenkins -- plugins --available plugins --- OWASP Dependency-check -- install

jenkins dashboard -- manage jenkins -- tools -- 
dependency- check installations : dependency-check
Name : DP-Check
select : Install automatically
install from github.com : version dependency-check 6.5.1
click -- apply -- save 


jenkins dashboard -- manage jenkins -- tools

Add dependency- check installation -- add dependency

Name : DP-Check
select : Install automatically
install from github.com : version - dependency-check 6.5.1
click -- apply -- save



Jenkins dashboard -- manage jenkins -- plugins --available plugins -- docker install 
1. docker
2. docker commons
3. docker pipeline
4. docker API
5. docker- build - step  

install

Jenkins dashboard -- manage jenkins -- tools
docker installation  -- add docker

Name : docker
select : install automatically -- add installer --download from docker.com
docker version : latest
click -- apply --save 

jenkins dashboard -- manage jenkins -- credentials --  

store : system
domain : global ( click ) -- add credentials

New credentials : 
kind : username and password
scope : jenkins etc
username : ravib007
password : vijay@123
id :ravi
description: ravidocker
click -- create

goto jenkins server : 
sudo usermod -aG docker jenkins
systemctl daemon-reload
systemctl restart jenkins
systemctl status jenkins


goto jenkins dashboard page : refresh

login:
username : admin
password : admin

select failure job : status --  restart from stage

job status -- success

goto dockerhub login page -- refresh the repository  ( ravib007/petshop)
goto jenkins server : docker images  ( shown images )
docker run -d --name ravi -p 8080:8080 ravib007/petshop:latest
docker ps 

hit the public ip address of jenkins server :13.53.216.31:8080/jpetstore
docker stop a12183696a32
docker ps

install trivy:
```````````
cat << EOF | sudo tee -a /etc/yum.repos.d/trivy.repo
[trivy]
name=Trivy repository
baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/\$basearch/
gpgcheck=1
enabled=1
gpgkey=https://aquasecurity.github.io/trivy-repo/rpm/public.key
EOF
sudo yum update -y
sudo yum install trivy -y



goto jenkins terminal : 
cd/var/lib/jenkins/workspace/PROJECT
ls
cat TRIVY.json


jenkins dashboard -- manage jenkins -- plugins -- available plugins -- 
1. ssh
2. ssh server
3. publish over ssh
4. ssh agent
5. ssh pipeline steps

click -- install

jenkins dashboard -- manage jenkins -- plugins -- available plugins 

1. kubernetes
2. kubernetes client API
3. kubernetes credentials
4. kubernetes cli
5. kubernetes credentials provider
6. kubernetes pipeline devops steps
click -- install


jenkins dashboard -- project(job name) -- pipeline syntax
sample steps : SSH agent
add --> jenkins -- add 

add credentials 
domain : global credentials
kind :SSH username and private key
scope : Global jenkins etc
id : kubeclient
description :kubeclientdeploy
username :ec2-user
private key : select (enter directly) -- add  


goto puttygen -- load -- select key conversion  -- export opensshkey --save --ravi.pem and close

open the ravi.pem file --  goto jenkins page -- private key : select (enter directly) -- add  
 paste the ravi.pem file (secret code) add and save
 
generate script : sshagent(['kubeclient']) {


kops server : ece-user
ls  (deployment file)
cat deployment file 

jenkins dashboard - job configure --
select --> github project : https://github.com/ravib007/jpetstore-6.git
select --> GitHub hook trigger for GITScm polling
click -- apply -- save 

goto github login page -- repository -- settings -- webhook- add webhooks :
payload url :http://13.53.216.31:8010/github-webhook/
click -- Add webhook  -- refresh the page ( active status)

 goto git hub -- code page -- select deployment.yaml -- click edit 
```````````````````
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ravipetshop
spec:
  selector:
    matchLabels:
      app: ravipetshop
  replicas: 1 
  template: 
    metadata:
      labels:
        app: ravipetshop
    spec:
      containers:
      - name:  ravipetshop
        image: ravib007/petshop:latest
        ports:
        - containerPort: 8080
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name:  ravipetshop
spec:
  type: LoadBalancer
  selector:
    app:  ravipetshop
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080

`````````````````````````````

goto kops terminal :

ec2-user
sudo yum update -y
ls (deployment.yaml)
cat deployment.yaml
sudo -i
ku get pods
ku get svc
ku describe pod ravipetshop-7767f4d784-x6dqk 

ku get svc

Node:i-0baf8e8d04e798f7e/172.20.68.52
load balancer : port enable  31058

goto ec2 page : check the ip address : 
hit the public ip address : 13.60.226.245:31058 

security -- select security groups -- edit inbound rules :

security group id : sgr-0f13a601a06350921
Type : Custom TCP 
protocol : tcp
port : 31058 
source : custom
search : 0.0.0.0/0 
click -- save rules 

hit the public ip address : 13.60.226.245:31058/jpetstore 


full working script pipeline project:

pipeline {
    agent any
    tools {
        maven 'maven2024'
    }
    environment {
        // Define SonarQube scanner home
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout SCM') {
            steps {
                git 'https://github.com/ravib007/jpetstore-6.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                // Use SonarQube environment
                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=Petshop \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=Petshop
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    // Wait for the quality gate result from SonarQube
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
        stage ('Build war file'){
            steps{
                sh 'mvn clean install -DskipTests=true'
            }
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage ('Build and push to docker hub'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'ravi', toolName: 'docker') {
                        sh "docker build -t petshop ."
                        sh "docker tag petshop ravib007/petshop:latest"
                        sh "docker push ravib007/petshop:latest"
                   }
                }
            }
        }
        stage('TRIVY') {
            steps {
                sh 'trivy image ravib007/petshop:latest --format json > trivy.json'
            }
        }
        stage('k8 login') {
            steps {
                sshagent(['kubeclient']) {
                    // Use ec2-user for the SCP command to ensure the correct user and file location
                    sh 'scp -o StrictHostKeyChecking=no ./deployment.yaml ec2-user@16.171.236.117:/home/ec2-user/'
                }
            }
        }
          stage('k8 deployment') {
            steps {
                 sshagent(['kubeclient']) {
                    // Apply the deployment and service configuration using the correct user and file path
                    sh 'ssh ec2-user@16.171.236.117 "sudo kubectl apply -f /home/ec2-user/deployment.yaml"'
                    
                    // Restart the deployment to ensure the changes are applied
                    sh 'ssh ec2-user@16.171.236.117 "sudo kubectl rollout restart deployment/ravipetshop"'
                }
            }
        }
    }
}

----------------------------------

jenkins dashboard -- manage jenkins -- plugins -- available plugins :
email extension template -- install -- success

jenkins dashboard -- manage jenkins -- credentials -- 

store : system
domains : global -- add credentials

new credentials 
kind : username and password
scope : global jenkins etc
username :ravimca2012@gmail.com
password : goto gmail account

select profile -- manage account --security -- search -- app password -- verify the mobile 
app name : jenkins 
click : generate
generate password : zozk tpyg slgd zdou
id : gmail
description:gmail
click --- create


jenkins dashboard -- manage jenkins -- system 
E- mail notification
smtp server : smtp.gmail.com
select : advanced 
tick : use smtp authentication 
username : ravimca2012@gmail.com
password :zozk tpyg slgd zdou
tick : use SSL
smpt port : 465
tick : test configuration by sending test email
test email recipient : ravimca2012@gmail.com 
click : test configuration 
status : email was successfully sent 

Extended E-mail notification
Smtp server : smtp.gmail.com
smtp  port : 465
select : advanced 
credentials : ravimca2012gmail.com
tick : use ssl 
default content type : html (text/html)
default subject : $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!
maximum attachment size : -1
project content : $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

Check console output at $BUILD_URL to view the results.

click : default triggers 
select : 
1. always
2. failure -any
3.select what you want options .

click -- save changes 


final stage script for pipeline project :
```````````````````````````````

pipeline {
    agent any
    tools {
        maven 'maven2024'
    }
    environment {
        // Define SonarQube scanner home
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout SCM') {
            steps {
                git 'https://github.com/ravib007/jpetstore-6.git'
            }
        }
        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('Maven Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                // Use SonarQube environment
                withSonarQubeEnv('sonar-server') {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=Petshop \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=Petshop
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    // Wait for the quality gate result from SonarQube
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
        stage ('Build war file'){
            steps{
                sh 'mvn clean install -DskipTests=true'
            }
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage ('Build and push to docker hub'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'ravi', toolName: 'docker') {
                        sh "docker build -t petshop ."
                        sh "docker tag petshop ravib007/petshop:latest"
                        sh "docker push ravib007/petshop:latest"
                   }
                }
            }
        }
        stage('TRIVY') {
            steps {
                sh 'trivy image ravib007/petshop:latest --format json > trivy.json'
            }
        }
        stage('k8 login') {
            steps {
                sshagent(['kubeclient']) {
                    // Use ec2-user for the SCP command to ensure the correct user and file location
                    sh 'scp -o StrictHostKeyChecking=no ./deployment.yaml ec2-user@16.171.236.117:/home/ec2-user/'
                }
            }
        }
          stage('k8 deployment') {
            steps {
                 sshagent(['kubeclient']) {
                    // Apply the deployment and service configuration using the correct user and file path
                    sh 'ssh ec2-user@16.171.236.117 "sudo kubectl apply -f /home/ec2-user/deployment.yaml"'
                    
                    // Restart the deployment to ensure the changes are applied
                    sh 'ssh ec2-user@16.171.236.117 "sudo kubectl rollout restart deployment/ravipetshop"'
                }
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'ravimca2012@gmail.com',  // updated email here
                attachmentsPattern: 'trivy.json'
        }
    }
}


output : successfull


























































 





